import{D as u}from"./index-BhEv1v6N.js";const _=async e=>{const a="query {getUserRoles { roles { id role } } }",r=`${u}graphql`,t=await fetch(r,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({query:a})}),s=await t.json();return{status:t.status,data:s.data}},h=async(e,a,r)=>{const t=`query {getUsers(page: ${a}, perPage: ${r}) { users { id user_login user_nicename user_email user_url user_registered user_activation_key user_status display_name first_name last_name user_role { id role } post_count } total } }`,s=`${u}graphql`,n=await fetch(s,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({query:t})}),o=await n.json();return{status:n.status,data:o.data}},m=async(e,a)=>{const r=`query {getUserBy(field: "${e}", value: "${a}") { id user_login user_nicename user_email user_url user_registered user_activation_key user_status display_name first_name last_name user_role { id role } post_count } }`,t=`${u}graphql`,s=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:r})}),n=await s.json();return{status:s.status,data:n.data}},$=async(e,a,r,t,s,n,o,c)=>{const i=`mutation {updateUser(user_nicename: "${a}", first_name: "${r}", last_name: "${t}", user_email: "${s}", user_password: """${n}""", roleId: ${o}, userId: ${c}) { success error } }`,d=`${u}graphql`,l=await fetch(d,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({query:i})}),y=await l.json();return{status:l.status,data:y.data}},g=async(e,a,r,t,s,n)=>{const o=`mutation { createUser(display_name: "${e}", first_name: "${a}", last_name: "${r}", user_email: "${t}", user_password: """${s}""", roleId: ${n} ) { success error } }`,c=`${u}graphql`,i=await fetch(c,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:o})}),d=await i.json();return{status:i.status,data:d.data}},q=async(e,a,r)=>{const t=`mutation { createNewPassword(password: "${e}", userLogin: "${a}", key: "${r}") { success error } }`,s=`${u}graphql`,n=await fetch(s,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({query:t})}),o=await n.json();return{status:n.status,data:o.data}},w=async(e,a)=>{const r=`mutation { passwordResetAdmin(userId: ${a}) { success error } }`,t=`${u}graphql`,s=await fetch(t,{method:"POST",headers:{"Content-Type":"application/json",Authorization:`Bearer ${e}`},body:JSON.stringify({query:r})}),n=await s.json();return{status:s.status,data:n.data}};export{_ as A,h as a,g as b,w as c,$ as d,q as e,m as f};
